/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  ProductQuery,
} from './types/graphql';

export namespace Components {
  interface ManifoldButton {
    'href'?: string;
  }
  interface ManifoldCheckbox {
    'checked'?: boolean;
    'inputId'?: string;
    'name'?: string;
  }
  interface ManifoldCostTiers {
    'cost'?: number;
    'maxLimit'?: number;
    'minLimit'?: number;
    'unit'?: string;
  }
  interface ManifoldEmptyCell {}
  interface ManifoldMetered {}
  interface ManifoldPlanMatrix {
    'baseUrl'?: string;
    'ctaText'?: string;
    'graphqlUrl'?: string;
    'productId'?: string;
  }
  interface ManifoldThead {
    'plan'?: ProductQuery['product']['plans']['edges'][0];
    'titleText'?: string;
  }
}

declare global {


  interface HTMLManifoldButtonElement extends Components.ManifoldButton, HTMLStencilElement {}
  var HTMLManifoldButtonElement: {
    prototype: HTMLManifoldButtonElement;
    new (): HTMLManifoldButtonElement;
  };

  interface HTMLManifoldCheckboxElement extends Components.ManifoldCheckbox, HTMLStencilElement {}
  var HTMLManifoldCheckboxElement: {
    prototype: HTMLManifoldCheckboxElement;
    new (): HTMLManifoldCheckboxElement;
  };

  interface HTMLManifoldCostTiersElement extends Components.ManifoldCostTiers, HTMLStencilElement {}
  var HTMLManifoldCostTiersElement: {
    prototype: HTMLManifoldCostTiersElement;
    new (): HTMLManifoldCostTiersElement;
  };

  interface HTMLManifoldEmptyCellElement extends Components.ManifoldEmptyCell, HTMLStencilElement {}
  var HTMLManifoldEmptyCellElement: {
    prototype: HTMLManifoldEmptyCellElement;
    new (): HTMLManifoldEmptyCellElement;
  };

  interface HTMLManifoldMeteredElement extends Components.ManifoldMetered, HTMLStencilElement {}
  var HTMLManifoldMeteredElement: {
    prototype: HTMLManifoldMeteredElement;
    new (): HTMLManifoldMeteredElement;
  };

  interface HTMLManifoldPlanMatrixElement extends Components.ManifoldPlanMatrix, HTMLStencilElement {}
  var HTMLManifoldPlanMatrixElement: {
    prototype: HTMLManifoldPlanMatrixElement;
    new (): HTMLManifoldPlanMatrixElement;
  };

  interface HTMLManifoldTheadElement extends Components.ManifoldThead, HTMLStencilElement {}
  var HTMLManifoldTheadElement: {
    prototype: HTMLManifoldTheadElement;
    new (): HTMLManifoldTheadElement;
  };
  interface HTMLElementTagNameMap {
    'manifold-button': HTMLManifoldButtonElement;
    'manifold-checkbox': HTMLManifoldCheckboxElement;
    'manifold-cost-tiers': HTMLManifoldCostTiersElement;
    'manifold-empty-cell': HTMLManifoldEmptyCellElement;
    'manifold-metered': HTMLManifoldMeteredElement;
    'manifold-plan-matrix': HTMLManifoldPlanMatrixElement;
    'manifold-thead': HTMLManifoldTheadElement;
  }
}

declare namespace LocalJSX {
  interface ManifoldButton {
    'href'?: string;
  }
  interface ManifoldCheckbox {
    'checked'?: boolean;
    'inputId'?: string;
    'name'?: string;
  }
  interface ManifoldCostTiers {
    'cost'?: number;
    'maxLimit'?: number;
    'minLimit'?: number;
    'unit'?: string;
  }
  interface ManifoldEmptyCell {}
  interface ManifoldMetered {}
  interface ManifoldPlanMatrix {
    'baseUrl'?: string;
    'ctaText'?: string;
    'graphqlUrl'?: string;
    'productId'?: string;
  }
  interface ManifoldThead {
    'plan'?: ProductQuery['product']['plans']['edges'][0];
    'titleText'?: string;
  }

  interface IntrinsicElements {
    'manifold-button': ManifoldButton;
    'manifold-checkbox': ManifoldCheckbox;
    'manifold-cost-tiers': ManifoldCostTiers;
    'manifold-empty-cell': ManifoldEmptyCell;
    'manifold-metered': ManifoldMetered;
    'manifold-plan-matrix': ManifoldPlanMatrix;
    'manifold-thead': ManifoldThead;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'manifold-button': LocalJSX.ManifoldButton & JSXBase.HTMLAttributes<HTMLManifoldButtonElement>;
      'manifold-checkbox': LocalJSX.ManifoldCheckbox & JSXBase.HTMLAttributes<HTMLManifoldCheckboxElement>;
      'manifold-cost-tiers': LocalJSX.ManifoldCostTiers & JSXBase.HTMLAttributes<HTMLManifoldCostTiersElement>;
      'manifold-empty-cell': LocalJSX.ManifoldEmptyCell & JSXBase.HTMLAttributes<HTMLManifoldEmptyCellElement>;
      'manifold-metered': LocalJSX.ManifoldMetered & JSXBase.HTMLAttributes<HTMLManifoldMeteredElement>;
      'manifold-plan-matrix': LocalJSX.ManifoldPlanMatrix & JSXBase.HTMLAttributes<HTMLManifoldPlanMatrixElement>;
      'manifold-thead': LocalJSX.ManifoldThead & JSXBase.HTMLAttributes<HTMLManifoldTheadElement>;
    }
  }
}


